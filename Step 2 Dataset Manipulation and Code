{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e6bbc1cd",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-09-06T06:42:02.211379Z",
     "iopub.status.busy": "2024-09-06T06:42:02.210861Z",
     "iopub.status.idle": "2024-09-06T06:42:02.221700Z",
     "shell.execute_reply": "2024-09-06T06:42:02.220586Z"
    },
    "papermill": {
     "duration": 0.028824,
     "end_time": "2024-09-06T06:42:02.224213",
     "exception": false,
     "start_time": "2024-09-06T06:42:02.195389",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os \n",
    "import shutil\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36c423cc",
   "metadata": {
    "papermill": {
     "duration": 0.012934,
     "end_time": "2024-09-06T06:42:02.250386",
     "exception": false,
     "start_time": "2024-09-06T06:42:02.237452",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **First Understand the dataset File structure**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8d85137c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:42:02.279237Z",
     "iopub.status.busy": "2024-09-06T06:42:02.278831Z",
     "iopub.status.idle": "2024-09-06T06:42:02.284927Z",
     "shell.execute_reply": "2024-09-06T06:42:02.283805Z"
    },
    "papermill": {
     "duration": 0.023227,
     "end_time": "2024-09-06T06:42:02.287704",
     "exception": false,
     "start_time": "2024-09-06T06:42:02.264477",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Current Directory: /kaggle/working\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "\n",
    "current_directory = os.getcwd()\n",
    "print(\"Current Directory:\", current_directory)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cdcb9136",
   "metadata": {
    "papermill": {
     "duration": 0.012833,
     "end_time": "2024-09-06T06:42:02.313657",
     "exception": false,
     "start_time": "2024-09-06T06:42:02.300824",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# List Dirs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fbcb602b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:42:02.342192Z",
     "iopub.status.busy": "2024-09-06T06:42:02.340604Z",
     "iopub.status.idle": "2024-09-06T06:42:02.353815Z",
     "shell.execute_reply": "2024-09-06T06:42:02.352749Z"
    },
    "papermill": {
     "duration": 0.029909,
     "end_time": "2024-09-06T06:42:02.356452",
     "exception": false,
     "start_time": "2024-09-06T06:42:02.326543",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Meta',\n",
       " 'meta',\n",
       " 'Meta.csv',\n",
       " 'Train.csv',\n",
       " 'Test.csv',\n",
       " 'Test',\n",
       " 'test',\n",
       " 'Train',\n",
       " 'train']"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.listdir(\"/kaggle/input/gtsrb-german-traffic-sign\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "051b6e74",
   "metadata": {
    "papermill": {
     "duration": 0.012981,
     "end_time": "2024-09-06T06:42:02.382987",
     "exception": false,
     "start_time": "2024-09-06T06:42:02.370006",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# List Dirs in a more efficient way"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c454644e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:42:02.410977Z",
     "iopub.status.busy": "2024-09-06T06:42:02.410560Z",
     "iopub.status.idle": "2024-09-06T06:42:02.418082Z",
     "shell.execute_reply": "2024-09-06T06:42:02.416705Z"
    },
    "papermill": {
     "duration": 0.02442,
     "end_time": "2024-09-06T06:42:02.420636",
     "exception": false,
     "start_time": "2024-09-06T06:42:02.396216",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Meta\n",
      "meta\n",
      "Meta.csv\n",
      "Train.csv\n",
      "Test.csv\n",
      "Test\n",
      "test\n",
      "Train\n",
      "train\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "\n",
    "with os.scandir('/kaggle/input/gtsrb-german-traffic-sign') as entries:\n",
    "    for entry in entries:\n",
    "        print(entry.name)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15f445a9",
   "metadata": {
    "papermill": {
     "duration": 0.01281,
     "end_time": "2024-09-06T06:42:02.446672",
     "exception": false,
     "start_time": "2024-09-06T06:42:02.433862",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Uses to get all the directory stucture including all files and folders"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a9baa485",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:42:02.474611Z",
     "iopub.status.busy": "2024-09-06T06:42:02.474155Z",
     "iopub.status.idle": "2024-09-06T06:43:34.637209Z",
     "shell.execute_reply": "2024-09-06T06:43:34.635914Z"
    },
    "papermill": {
     "duration": 92.180149,
     "end_time": "2024-09-06T06:43:34.639906",
     "exception": false,
     "start_time": "2024-09-06T06:42:02.459757",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Subdirectories in /kaggle/input/gtsrb-german-traffic-sign:\n",
      "  - ['Meta', 'meta', 'Test', 'test', 'Train', 'train']\n",
      "Subdirectories in /kaggle/input/gtsrb-german-traffic-sign/Train:\n",
      "  - ['7', '17', '19', '22', '2', '35', '23', '10', '5', '36', '20', '27', '41', '39', '32', '25', '42', '8', '38', '12', '0', '31', '34', '18', '28', '16', '13', '26', '15', '3', '1', '30', '14', '4', '9', '21', '40', '6', '11', '37', '33', '29', '24']\n",
      "Subdirectories in /kaggle/input/gtsrb-german-traffic-sign/train:\n",
      "  - ['7', '17', '19', '22', '2', '35', '23', '10', '5', '36', '20', '27', '41', '39', '32', '25', '42', '8', '38', '12', '0', '31', '34', '18', '28', '16', '13', '26', '15', '3', '1', '30', '14', '4', '9', '21', '40', '6', '11', '37', '33', '29', '24']\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "\n",
    "for dirpath, dirnames, filenames in os.walk('/kaggle/input/gtsrb-german-traffic-sign'):\n",
    "#     if dirpath == \"/kaggle/input/gtsrb-german-traffic-sign/Train\":\n",
    "#         continue\n",
    "    if dirnames:\n",
    "        print(f\"Subdirectories in {dirpath}:\")\n",
    "#         for dirname in dirnames:\n",
    "        print(f\"  - {dirnames}\")\n",
    "#     print(f'Found directory: {dirpath}')\n",
    "#     for filename in filenames:\n",
    "#         print(f'\\t{filename}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8e7f601d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:43:34.669509Z",
     "iopub.status.busy": "2024-09-06T06:43:34.668359Z",
     "iopub.status.idle": "2024-09-06T06:43:34.676808Z",
     "shell.execute_reply": "2024-09-06T06:43:34.675710Z"
    },
    "papermill": {
     "duration": 0.025764,
     "end_time": "2024-09-06T06:43:34.679161",
     "exception": false,
     "start_time": "2024-09-06T06:43:34.653397",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Meta',\n",
       " 'meta',\n",
       " 'Meta.csv',\n",
       " 'Train.csv',\n",
       " 'Test.csv',\n",
       " 'Test',\n",
       " 'test',\n",
       " 'Train',\n",
       " 'train']"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.listdir(\"/kaggle/input/gtsrb-german-traffic-sign/\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9a5dc39d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:43:34.708241Z",
     "iopub.status.busy": "2024-09-06T06:43:34.707857Z",
     "iopub.status.idle": "2024-09-06T06:43:34.716127Z",
     "shell.execute_reply": "2024-09-06T06:43:34.714607Z"
    },
    "papermill": {
     "duration": 0.026563,
     "end_time": "2024-09-06T06:43:34.719400",
     "exception": false,
     "start_time": "2024-09-06T06:43:34.692837",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "43\n",
      "['7', '17', '19', '22', '2', '35', '23', '10', '5', '36', '20', '27', '41', '39', '32', '25', '42', '8', '38', '12', '0', '31', '34', '18', '28', '16', '13', '26', '15', '3', '1', '30', '14', '4', '9', '21', '40', '6', '11', '37', '33', '29', '24']\n"
     ]
    }
   ],
   "source": [
    "x = len(os.listdir(\"/kaggle/input/gtsrb-german-traffic-sign/Train\"))\n",
    "\n",
    "print(x)\n",
    "print(os.listdir(\"/kaggle/input/gtsrb-german-traffic-sign/Train\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "664b77b8",
   "metadata": {
    "papermill": {
     "duration": 0.014837,
     "end_time": "2024-09-06T06:43:34.748515",
     "exception": false,
     "start_time": "2024-09-06T06:43:34.733678",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Deleting a file**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "365f92fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:43:34.779379Z",
     "iopub.status.busy": "2024-09-06T06:43:34.778967Z",
     "iopub.status.idle": "2024-09-06T06:43:34.784318Z",
     "shell.execute_reply": "2024-09-06T06:43:34.782813Z"
    },
    "papermill": {
     "duration": 0.023821,
     "end_time": "2024-09-06T06:43:34.786998",
     "exception": false,
     "start_time": "2024-09-06T06:43:34.763177",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import os\n",
    "\n",
    "# os.rmdir('/path/to/empty_directory')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c678aa1e",
   "metadata": {
    "papermill": {
     "duration": 0.013718,
     "end_time": "2024-09-06T06:43:34.814205",
     "exception": false,
     "start_time": "2024-09-06T06:43:34.800487",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Delete an empty directry**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7cc6072a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:43:34.845149Z",
     "iopub.status.busy": "2024-09-06T06:43:34.844733Z",
     "iopub.status.idle": "2024-09-06T06:43:34.849781Z",
     "shell.execute_reply": "2024-09-06T06:43:34.848591Z"
    },
    "papermill": {
     "duration": 0.024194,
     "end_time": "2024-09-06T06:43:34.852939",
     "exception": false,
     "start_time": "2024-09-06T06:43:34.828745",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import os\n",
    "\n",
    "# os.rmdir('/path/to/empty_directory')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f240b43f",
   "metadata": {
    "papermill": {
     "duration": 0.014848,
     "end_time": "2024-09-06T06:43:34.883885",
     "exception": false,
     "start_time": "2024-09-06T06:43:34.869037",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Make a new directory**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5154b546",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:43:34.916328Z",
     "iopub.status.busy": "2024-09-06T06:43:34.915922Z",
     "iopub.status.idle": "2024-09-06T06:43:34.921516Z",
     "shell.execute_reply": "2024-09-06T06:43:34.920159Z"
    },
    "papermill": {
     "duration": 0.024923,
     "end_time": "2024-09-06T06:43:34.924526",
     "exception": false,
     "start_time": "2024-09-06T06:43:34.899603",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "os.mkdir(\"/kaggle/working/new_db\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "fb8e6f0a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:43:34.955227Z",
     "iopub.status.busy": "2024-09-06T06:43:34.954236Z",
     "iopub.status.idle": "2024-09-06T06:43:34.960656Z",
     "shell.execute_reply": "2024-09-06T06:43:34.958826Z"
    },
    "papermill": {
     "duration": 0.024516,
     "end_time": "2024-09-06T06:43:34.963339",
     "exception": false,
     "start_time": "2024-09-06T06:43:34.938823",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "os.mkdir(\"/kaggle/working/new_db/Train\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4a4d525",
   "metadata": {
    "papermill": {
     "duration": 0.013312,
     "end_time": "2024-09-06T06:43:34.990276",
     "exception": false,
     "start_time": "2024-09-06T06:43:34.976964",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Delete directory and its contents**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "94f5c7ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:43:35.020554Z",
     "iopub.status.busy": "2024-09-06T06:43:35.019301Z",
     "iopub.status.idle": "2024-09-06T06:43:35.025329Z",
     "shell.execute_reply": "2024-09-06T06:43:35.024140Z"
    },
    "papermill": {
     "duration": 0.024244,
     "end_time": "2024-09-06T06:43:35.028141",
     "exception": false,
     "start_time": "2024-09-06T06:43:35.003897",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "shutil.rmtree(\"/kaggle/working/new_db\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a90b6c2",
   "metadata": {
    "papermill": {
     "duration": 0.013694,
     "end_time": "2024-09-06T06:43:35.055599",
     "exception": false,
     "start_time": "2024-09-06T06:43:35.041905",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Copy contents of a directory to another**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d8870b5f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:43:35.085085Z",
     "iopub.status.busy": "2024-09-06T06:43:35.084648Z",
     "iopub.status.idle": "2024-09-06T06:43:35.090168Z",
     "shell.execute_reply": "2024-09-06T06:43:35.089007Z"
    },
    "papermill": {
     "duration": 0.02301,
     "end_time": "2024-09-06T06:43:35.092660",
     "exception": false,
     "start_time": "2024-09-06T06:43:35.069650",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import shutil\n",
    "# import os\n",
    "\n",
    "# # Define source and destination paths\n",
    "# source_dir = '/kaggle/input/gtsrb-german-traffic-sign/Train'\n",
    "# destination_dir = '/kaggle/working/new_db/Train'\n",
    "\n",
    "# # Copy the entire directory tree from source to destination, allowing overwriting\n",
    "# shutil.copytree(source_dir, destination_dir, dirs_exist_ok=True)\n",
    "# print(f\"Directory '{source_dir}' copied to '{destination_dir}' successfully.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7a1cbb4",
   "metadata": {
    "papermill": {
     "duration": 0.015281,
     "end_time": "2024-09-06T06:43:35.122257",
     "exception": false,
     "start_time": "2024-09-06T06:43:35.106976",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Changeing names of dirs**\n",
    "remeber dir names must not have / in them"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b2e4dd89",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:43:35.151976Z",
     "iopub.status.busy": "2024-09-06T06:43:35.151563Z",
     "iopub.status.idle": "2024-09-06T06:43:35.159814Z",
     "shell.execute_reply": "2024-09-06T06:43:35.158320Z"
    },
    "papermill": {
     "duration": 0.025743,
     "end_time": "2024-09-06T06:43:35.162336",
     "exception": false,
     "start_time": "2024-09-06T06:43:35.136593",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class_names = { \n",
    "    0:'Speed limit (20km-h)',\n",
    "    1:'Speed limit (30km-h)', \n",
    "    2:'Speed limit (50km-h)', \n",
    "    3:'Speed limit (60km-h)', \n",
    "    4:'Speed limit (70km-h)', \n",
    "    5:'Speed limit (80km-h)', \n",
    "    6:'End of speed limit (80km-h)', \n",
    "    7:'Speed limit (100km-h)', \n",
    "    8:'Speed limit (120km-h)', \n",
    "    9:'No passing', \n",
    "    10:'No passing veh over 3.5 tons', \n",
    "    11:'Right-of-way at intersection', \n",
    "    12:'Priority road', \n",
    "    13:'Yield', \n",
    "    14:'Stop', \n",
    "    15:'No vehicles', \n",
    "    16:'Veh > 3.5 tons prohibited', \n",
    "    17:'No entry', \n",
    "    18:'General caution', \n",
    "    19:'Dangerous curve left', \n",
    "    20:'Dangerous curve right', \n",
    "    21:'Double curve', \n",
    "    22:'Bumpy road', \n",
    "    23:'Slippery road', \n",
    "    24:'Road narrows on the right', \n",
    "    25:'Road work', \n",
    "    26:'Traffic signals', \n",
    "    27:'Pedestrians', \n",
    "    28:'Children crossing', \n",
    "    29:'Bicycles crossing', \n",
    "    30:'Beware of ice-snow',\n",
    "    31:'Wild animals crossing', \n",
    "    32:'End speed + passing limits', \n",
    "    33:'Turn right ahead', \n",
    "    34:'Turn left ahead', \n",
    "    35:'Ahead only', \n",
    "    36:'Go straight or right', \n",
    "    37:'Go straight or left', \n",
    "    38:'Keep right', \n",
    "    39:'Keep left', \n",
    "    40:'Roundabout mandatory', \n",
    "    41:'End of no passing', \n",
    "    42:'End no passing veh > 3.5 tons' \n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2a72a1e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:43:35.191726Z",
     "iopub.status.busy": "2024-09-06T06:43:35.191300Z",
     "iopub.status.idle": "2024-09-06T06:43:35.196516Z",
     "shell.execute_reply": "2024-09-06T06:43:35.195502Z"
    },
    "papermill": {
     "duration": 0.022814,
     "end_time": "2024-09-06T06:43:35.198819",
     "exception": false,
     "start_time": "2024-09-06T06:43:35.176005",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import os\n",
    "\n",
    "# # Assuming class_names is a dictionary or list\n",
    "# train_dir = \"/kaggle/working/new_db/Train\"\n",
    "# if os.path.exists(train_dir) == False:\n",
    "#     os.makedir(train_dir)\n",
    "\n",
    "\n",
    "# with os.scandir(train_dir) as entries:\n",
    "#     for entry in entries:\n",
    "# #         print(entry.name)\n",
    "# #         print(class_names[int(entry.name)])\n",
    "# #         if isinstance(entry.name, (int, float)): #to check if a value is a number or not\n",
    "#         if entry.name.isdigit():\n",
    "#             destination_dir = os.path.join(train_dir,entry.name)\n",
    "#             change_dir = os.path.join(train_dir,class_names[int(entry.name)])\n",
    "#             if os.path.exists(destination_dir):\n",
    "#                 print(destination_dir,\"Exists\")\n",
    "#                 os.rename(destination_dir,change_dir)\n",
    "#                 print(f\"renamed {destination_dir} to {change_dir}\")\n",
    "#         else:\n",
    "#             print(\"already renamed\")\n",
    "# #             continue\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc24d1af",
   "metadata": {
    "papermill": {
     "duration": 0.013246,
     "end_time": "2024-09-06T06:43:35.225593",
     "exception": false,
     "start_time": "2024-09-06T06:43:35.212347",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Converting all the images in train dir to two folders Critical/Non-Critical**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "42782ae4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:43:35.254391Z",
     "iopub.status.busy": "2024-09-06T06:43:35.253952Z",
     "iopub.status.idle": "2024-09-06T06:43:35.260003Z",
     "shell.execute_reply": "2024-09-06T06:43:35.258724Z"
    },
    "papermill": {
     "duration": 0.023203,
     "end_time": "2024-09-06T06:43:35.262222",
     "exception": false,
     "start_time": "2024-09-06T06:43:35.239019",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import os\n",
    "# import shutil\n",
    "\n",
    "# # Define the paths\n",
    "# original_dataset = '/kaggle/input/gtsrb-german-traffic-sign/Train'\n",
    "# new_dataset = '/kaggle/working/new_db'\n",
    "\n",
    "# # Define which classes are critical (adjust based on GTSRB class numbers)\n",
    "# critical_classes = [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]\n",
    "\n",
    "# # Create new directories\n",
    "# os.makedirs(os.path.join(new_dataset, 'critical'), exist_ok=True)\n",
    "# os.makedirs(os.path.join(new_dataset, 'non_critical'), exist_ok=True)\n",
    "\n",
    "# # Iterate through the original dataset\n",
    "# for class_folder in os.listdir(original_dataset):\n",
    "#     class_path = os.path.join(original_dataset, class_folder)\n",
    "#     if os.path.isdir(class_path):\n",
    "#         class_num = int(class_folder)\n",
    "#         target_folder = 'critical' if class_num in critical_classes else 'non_critical'\n",
    "        \n",
    "#         # Copy images to the new structure\n",
    "#         for image in os.listdir(class_path):\n",
    "#             src = os.path.join(class_path, image)\n",
    "#             dst = os.path.join(new_dataset, target_folder, f\"{class_num}_{image}\")\n",
    "#             shutil.copy2(src, dst)\n",
    "\n",
    "# print(\"Dataset reorganization complete.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "208b95f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:43:35.291486Z",
     "iopub.status.busy": "2024-09-06T06:43:35.291013Z",
     "iopub.status.idle": "2024-09-06T06:43:35.298000Z",
     "shell.execute_reply": "2024-09-06T06:43:35.296892Z"
    },
    "papermill": {
     "duration": 0.024758,
     "end_time": "2024-09-06T06:43:35.300530",
     "exception": false,
     "start_time": "2024-09-06T06:43:35.275772",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "for dirpath, dirnames, filenames in os.walk(\"/kaggle/working/new_db\"):\n",
    "#     if dirpath == \"/kaggle/input/gtsrb-german-traffic-sign/Train\":\n",
    "#         continue\n",
    "    if dirnames:\n",
    "        print(dirnames)\n",
    "    if dirpath:\n",
    "        print(dirpath)\n",
    "#     if dirnames:\n",
    "#         print(f\"Subdirectories in {dirpath}:\")\n",
    "# #         for dirname in dirnames:\n",
    "#         print(f\"  - {dirnames}\")\n",
    "#     print(f'Found directory: {dirpath}')\n",
    "#     for filename in filenames:\n",
    "#         print(f'\\t{filename}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dcb34d5a",
   "metadata": {
    "papermill": {
     "duration": 0.013548,
     "end_time": "2024-09-06T06:43:35.328869",
     "exception": false,
     "start_time": "2024-09-06T06:43:35.315321",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    ">  # CSV USAGE AND MANIPULATION"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4312e9d0",
   "metadata": {
    "papermill": {
     "duration": 0.015016,
     "end_time": "2024-09-06T06:43:35.357994",
     "exception": false,
     "start_time": "2024-09-06T06:43:35.342978",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Reading CSV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "ef7dfdb7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:43:35.388915Z",
     "iopub.status.busy": "2024-09-06T06:43:35.388480Z",
     "iopub.status.idle": "2024-09-06T06:43:35.834094Z",
     "shell.execute_reply": "2024-09-06T06:43:35.832811Z"
    },
    "papermill": {
     "duration": 0.465126,
     "end_time": "2024-09-06T06:43:35.836931",
     "exception": false,
     "start_time": "2024-09-06T06:43:35.371805",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "df = pd.read_csv('/kaggle/input/gtsrb-german-traffic-sign/Test.csv')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b75db882",
   "metadata": {
    "papermill": {
     "duration": 0.013363,
     "end_time": "2024-09-06T06:43:35.864097",
     "exception": false,
     "start_time": "2024-09-06T06:43:35.850734",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Printing first 5 elements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "7b9451a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:43:35.894839Z",
     "iopub.status.busy": "2024-09-06T06:43:35.894406Z",
     "iopub.status.idle": "2024-09-06T06:43:35.916398Z",
     "shell.execute_reply": "2024-09-06T06:43:35.915077Z"
    },
    "papermill": {
     "duration": 0.041393,
     "end_time": "2024-09-06T06:43:35.919281",
     "exception": false,
     "start_time": "2024-09-06T06:43:35.877888",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<bound method NDFrame.head of        Width  Height  Roi.X1  Roi.Y1  Roi.X2  Roi.Y2  ClassId            Path\n",
      "0         53      54       6       5      48      49       16  Test/00000.png\n",
      "1         42      45       5       5      36      40        1  Test/00001.png\n",
      "2         48      52       6       6      43      47       38  Test/00002.png\n",
      "3         27      29       5       5      22      24       33  Test/00003.png\n",
      "4         60      57       5       5      55      52       11  Test/00004.png\n",
      "...      ...     ...     ...     ...     ...     ...      ...             ...\n",
      "12625     42      41       5       6      37      36       12  Test/12625.png\n",
      "12626     50      51       6       5      45      46       33  Test/12626.png\n",
      "12627     29      29       6       6      24      24        6  Test/12627.png\n",
      "12628     48      49       5       6      43      44        7  Test/12628.png\n",
      "12629     32      31       6       5      27      26       10  Test/12629.png\n",
      "\n",
      "[12630 rows x 8 columns]>\n"
     ]
    }
   ],
   "source": [
    "print(df.head)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd64f47f",
   "metadata": {
    "papermill": {
     "duration": 0.0136,
     "end_time": "2024-09-06T06:43:35.947880",
     "exception": false,
     "start_time": "2024-09-06T06:43:35.934280",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Printing Last 5 elements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "0404c9f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:43:35.978269Z",
     "iopub.status.busy": "2024-09-06T06:43:35.977874Z",
     "iopub.status.idle": "2024-09-06T06:43:35.987855Z",
     "shell.execute_reply": "2024-09-06T06:43:35.986619Z"
    },
    "papermill": {
     "duration": 0.028489,
     "end_time": "2024-09-06T06:43:35.990660",
     "exception": false,
     "start_time": "2024-09-06T06:43:35.962171",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<bound method NDFrame.tail of        Width  Height  Roi.X1  Roi.Y1  Roi.X2  Roi.Y2  ClassId            Path\n",
      "0         53      54       6       5      48      49       16  Test/00000.png\n",
      "1         42      45       5       5      36      40        1  Test/00001.png\n",
      "2         48      52       6       6      43      47       38  Test/00002.png\n",
      "3         27      29       5       5      22      24       33  Test/00003.png\n",
      "4         60      57       5       5      55      52       11  Test/00004.png\n",
      "...      ...     ...     ...     ...     ...     ...      ...             ...\n",
      "12625     42      41       5       6      37      36       12  Test/12625.png\n",
      "12626     50      51       6       5      45      46       33  Test/12626.png\n",
      "12627     29      29       6       6      24      24        6  Test/12627.png\n",
      "12628     48      49       5       6      43      44        7  Test/12628.png\n",
      "12629     32      31       6       5      27      26       10  Test/12629.png\n",
      "\n",
      "[12630 rows x 8 columns]>\n"
     ]
    }
   ],
   "source": [
    "print(df.tail)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "d9d07c91",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:43:36.020373Z",
     "iopub.status.busy": "2024-09-06T06:43:36.019964Z",
     "iopub.status.idle": "2024-09-06T06:43:36.027917Z",
     "shell.execute_reply": "2024-09-06T06:43:36.026365Z"
    },
    "papermill": {
     "duration": 0.025973,
     "end_time": "2024-09-06T06:43:36.030540",
     "exception": false,
     "start_time": "2024-09-06T06:43:36.004567",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0        16\n",
      "1         1\n",
      "2        38\n",
      "3        33\n",
      "4        11\n",
      "         ..\n",
      "12625    12\n",
      "12626    33\n",
      "12627     6\n",
      "12628     7\n",
      "12629    10\n",
      "Name: ClassId, Length: 12630, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(df['ClassId'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "e687fd13",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:43:36.061957Z",
     "iopub.status.busy": "2024-09-06T06:43:36.061527Z",
     "iopub.status.idle": "2024-09-06T06:43:36.068835Z",
     "shell.execute_reply": "2024-09-06T06:43:36.067694Z"
    },
    "papermill": {
     "duration": 0.026582,
     "end_time": "2024-09-06T06:43:36.072093",
     "exception": false,
     "start_time": "2024-09-06T06:43:36.045511",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0        16\n",
      "1         1\n",
      "2        38\n",
      "3        33\n",
      "4        11\n",
      "         ..\n",
      "12625    12\n",
      "12626    33\n",
      "12627     6\n",
      "12628     7\n",
      "12629    10\n",
      "Name: ClassId, Length: 12630, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(df['ClassId'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "8a372d13",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:43:36.103006Z",
     "iopub.status.busy": "2024-09-06T06:43:36.102560Z",
     "iopub.status.idle": "2024-09-06T06:43:36.111053Z",
     "shell.execute_reply": "2024-09-06T06:43:36.109829Z"
    },
    "papermill": {
     "duration": 0.026768,
     "end_time": "2024-09-06T06:43:36.113605",
     "exception": false,
     "start_time": "2024-09-06T06:43:36.086837",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class_names = { \n",
    "    0:'Speed limit (20km-h)',\n",
    "    1:'Speed limit (30km-h)', \n",
    "    2:'Speed limit (50km-h)', \n",
    "    3:'Speed limit (60km-h)', \n",
    "    4:'Speed limit (70km-h)', \n",
    "    5:'Speed limit (80km-h)', \n",
    "    6:'End of speed limit (80km-h)', \n",
    "    7:'Speed limit (100km-h)', \n",
    "    8:'Speed limit (120km-h)', \n",
    "    9:'No passing', \n",
    "    10:'No passing veh over 3.5 tons', \n",
    "    11:'Right-of-way at intersection', \n",
    "    12:'Priority road', \n",
    "    13:'Yield', \n",
    "    14:'Stop', \n",
    "    15:'No vehicles', \n",
    "    16:'Veh > 3.5 tons prohibited', \n",
    "    17:'No entry', \n",
    "    18:'General caution', \n",
    "    19:'Dangerous curve left', \n",
    "    20:'Dangerous curve right', \n",
    "    21:'Double curve', \n",
    "    22:'Bumpy road', \n",
    "    23:'Slippery road', \n",
    "    24:'Road narrows on the right', \n",
    "    25:'Road work', \n",
    "    26:'Traffic signals', \n",
    "    27:'Pedestrians', \n",
    "    28:'Children crossing', \n",
    "    29:'Bicycles crossing', \n",
    "    30:'Beware of ice-snow',\n",
    "    31:'Wild animals crossing', \n",
    "    32:'End speed + passing limits', \n",
    "    33:'Turn right ahead', \n",
    "    34:'Turn left ahead', \n",
    "    35:'Ahead only', \n",
    "    36:'Go straight or right', \n",
    "    37:'Go straight or left', \n",
    "    38:'Keep right', \n",
    "    39:'Keep left', \n",
    "    40:'Roundabout mandatory', \n",
    "    41:'End of no passing', \n",
    "    42:'End no passing veh > 3.5 tons' \n",
    "}\n",
    "critical_classes = [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b8f325a0",
   "metadata": {
    "papermill": {
     "duration": 0.013608,
     "end_time": "2024-09-06T06:43:36.141953",
     "exception": false,
     "start_time": "2024-09-06T06:43:36.128345",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#  ***If class id is in critical class create a new row and add 1 else if in non critical class add 0***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "29862b25",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:43:36.172511Z",
     "iopub.status.busy": "2024-09-06T06:43:36.172075Z",
     "iopub.status.idle": "2024-09-06T06:43:36.187827Z",
     "shell.execute_reply": "2024-09-06T06:43:36.186528Z"
    },
    "papermill": {
     "duration": 0.034794,
     "end_time": "2024-09-06T06:43:36.190689",
     "exception": false,
     "start_time": "2024-09-06T06:43:36.155895",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def is_critical(element):\n",
    "    return 1 if int(element) in critical_classes else 0\n",
    "df['Layer1_output'] = df['ClassId'].apply(is_critical)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "64863f8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:43:36.220772Z",
     "iopub.status.busy": "2024-09-06T06:43:36.220333Z",
     "iopub.status.idle": "2024-09-06T06:43:36.232761Z",
     "shell.execute_reply": "2024-09-06T06:43:36.231447Z"
    },
    "papermill": {
     "duration": 0.0304,
     "end_time": "2024-09-06T06:43:36.235195",
     "exception": false,
     "start_time": "2024-09-06T06:43:36.204795",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Width  Height  Roi.X1  Roi.Y1  Roi.X2  Roi.Y2  ClassId            Path  \\\n",
      "0         53      54       6       5      48      49       16  Test/00000.png   \n",
      "1         42      45       5       5      36      40        1  Test/00001.png   \n",
      "2         48      52       6       6      43      47       38  Test/00002.png   \n",
      "3         27      29       5       5      22      24       33  Test/00003.png   \n",
      "4         60      57       5       5      55      52       11  Test/00004.png   \n",
      "...      ...     ...     ...     ...     ...     ...      ...             ...   \n",
      "12625     42      41       5       6      37      36       12  Test/12625.png   \n",
      "12626     50      51       6       5      45      46       33  Test/12626.png   \n",
      "12627     29      29       6       6      24      24        6  Test/12627.png   \n",
      "12628     48      49       5       6      43      44        7  Test/12628.png   \n",
      "12629     32      31       6       5      27      26       10  Test/12629.png   \n",
      "\n",
      "       Layer1_output  \n",
      "0                  0  \n",
      "1                  0  \n",
      "2                  0  \n",
      "3                  0  \n",
      "4                  0  \n",
      "...              ...  \n",
      "12625              0  \n",
      "12626              0  \n",
      "12627              0  \n",
      "12628              0  \n",
      "12629              0  \n",
      "\n",
      "[12630 rows x 9 columns]\n"
     ]
    }
   ],
   "source": [
    "print(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ede6556b",
   "metadata": {
    "papermill": {
     "duration": 0.013858,
     "end_time": "2024-09-06T06:43:36.319999",
     "exception": false,
     "start_time": "2024-09-06T06:43:36.306141",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "> CHECKING\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "248a4eab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:43:36.350580Z",
     "iopub.status.busy": "2024-09-06T06:43:36.349308Z",
     "iopub.status.idle": "2024-09-06T06:43:36.356453Z",
     "shell.execute_reply": "2024-09-06T06:43:36.354731Z"
    },
    "papermill": {
     "duration": 0.025231,
     "end_time": "2024-09-06T06:43:36.359204",
     "exception": false,
     "start_time": "2024-09-06T06:43:36.333973",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "23\n",
      "1\n"
     ]
    }
   ],
   "source": [
    "print(df['ClassId'][12])\n",
    "print(df['Layer1_output'][12])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed82205d",
   "metadata": {
    "papermill": {
     "duration": 0.01368,
     "end_time": "2024-09-06T06:43:36.387091",
     "exception": false,
     "start_time": "2024-09-06T06:43:36.373411",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Get Count for verification"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "5d662c82",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:43:36.417874Z",
     "iopub.status.busy": "2024-09-06T06:43:36.416510Z",
     "iopub.status.idle": "2024-09-06T06:43:36.427619Z",
     "shell.execute_reply": "2024-09-06T06:43:36.426379Z"
    },
    "papermill": {
     "duration": 0.029063,
     "end_time": "2024-09-06T06:43:36.430070",
     "exception": false,
     "start_time": "2024-09-06T06:43:36.401007",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10261\n",
      "2370\n"
     ]
    }
   ],
   "source": [
    "count_critical =0\n",
    "count_non_critical = 1\n",
    "for i in df['Layer1_output']:\n",
    "    if i ==0:\n",
    "        count_non_critical+=1\n",
    "    else:\n",
    "        count_critical+=1\n",
    "print(count_non_critical)\n",
    "print(count_critical)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5201de8",
   "metadata": {
    "papermill": {
     "duration": 0.013914,
     "end_time": "2024-09-06T06:43:36.458200",
     "exception": false,
     "start_time": "2024-09-06T06:43:36.444286",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# > **Critical and Non critical path values of values of df based on Layer1_output  class values 0 or 1**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab44fe7d",
   "metadata": {
    "papermill": {
     "duration": 0.013942,
     "end_time": "2024-09-06T06:43:36.486302",
     "exception": false,
     "start_time": "2024-09-06T06:43:36.472360",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Create two diff data frames for labels "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "106aa441",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:43:36.517551Z",
     "iopub.status.busy": "2024-09-06T06:43:36.516622Z",
     "iopub.status.idle": "2024-09-06T06:43:36.764634Z",
     "shell.execute_reply": "2024-09-06T06:43:36.763301Z"
    },
    "papermill": {
     "duration": 0.2666,
     "end_time": "2024-09-06T06:43:36.767550",
     "exception": false,
     "start_time": "2024-09-06T06:43:36.500950",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Initialize an empty DataFrame\n",
    "df_non_critical = pd.DataFrame()\n",
    "df_critical = pd.DataFrame()\n",
    "\n",
    "# Add paths to corresponding columns based on Layer1_output\n",
    "df_non_critical['Non_Critical'] = df.apply(lambda df: df['Path'] if df['Layer1_output'] == 0 else None, axis=1)\n",
    "df_critical['Critical'] = df.apply(lambda df: df['Path'] if df['Layer1_output'] == 1 else None, axis=1)\n",
    "\n",
    "# Optional: Remove rows with NaN values in both columns (if desired)\n",
    "# new_df.dropna(how='all', inplace=True)\n",
    "\n",
    "# print(new_df.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "37098f62",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:43:36.798396Z",
     "iopub.status.busy": "2024-09-06T06:43:36.797998Z",
     "iopub.status.idle": "2024-09-06T06:43:36.805649Z",
     "shell.execute_reply": "2024-09-06T06:43:36.804517Z"
    },
    "papermill": {
     "duration": 0.027072,
     "end_time": "2024-09-06T06:43:36.808806",
     "exception": false,
     "start_time": "2024-09-06T06:43:36.781734",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      Critical\n",
      "0         None\n",
      "1         None\n",
      "2         None\n",
      "3         None\n",
      "4         None\n",
      "...        ...\n",
      "12625     None\n",
      "12626     None\n",
      "12627     None\n",
      "12628     None\n",
      "12629     None\n",
      "\n",
      "[12630 rows x 1 columns]\n"
     ]
    }
   ],
   "source": [
    "print(df_critical)\n",
    "# print()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223e51ec",
   "metadata": {
    "papermill": {
     "duration": 0.014257,
     "end_time": "2024-09-06T06:43:36.837399",
     "exception": false,
     "start_time": "2024-09-06T06:43:36.823142",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "ce1bb793",
   "metadata": {
    "papermill": {
     "duration": 0.013988,
     "end_time": "2024-09-06T06:43:36.865657",
     "exception": false,
     "start_time": "2024-09-06T06:43:36.851669",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Check if null values are properly there "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "7942a5c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:43:36.898154Z",
     "iopub.status.busy": "2024-09-06T06:43:36.897767Z",
     "iopub.status.idle": "2024-09-06T06:43:36.912038Z",
     "shell.execute_reply": "2024-09-06T06:43:36.910745Z"
    },
    "papermill": {
     "duration": 0.033,
     "end_time": "2024-09-06T06:43:36.914726",
     "exception": false,
     "start_time": "2024-09-06T06:43:36.881726",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         Non_Critical\n",
      "0      Test/00000.png\n",
      "1      Test/00001.png\n",
      "2      Test/00002.png\n",
      "3      Test/00003.png\n",
      "4      Test/00004.png\n",
      "...               ...\n",
      "12625  Test/12625.png\n",
      "12626  Test/12626.png\n",
      "12627  Test/12627.png\n",
      "12628  Test/12628.png\n",
      "12629  Test/12629.png\n",
      "\n",
      "[10260 rows x 1 columns]\n",
      "0\n"
     ]
    }
   ],
   "source": [
    "# print(df_non_critical)\n",
    "null_count = 0\n",
    "df_cleaned_non_critical = df_non_critical.dropna()\n",
    "print(df_cleaned_non_critical)\n",
    "for i in df_cleaned_non_critical['Non_Critical']:\n",
    "    if i :\n",
    "        continue\n",
    "    else:\n",
    "        null_count+=1\n",
    "print(null_count)\n",
    "        \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "52f2d4d9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:43:36.946294Z",
     "iopub.status.busy": "2024-09-06T06:43:36.945903Z",
     "iopub.status.idle": "2024-09-06T06:43:36.957963Z",
     "shell.execute_reply": "2024-09-06T06:43:36.956506Z"
    },
    "papermill": {
     "duration": 0.031328,
     "end_time": "2024-09-06T06:43:36.960509",
     "exception": false,
     "start_time": "2024-09-06T06:43:36.929181",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             Critical\n",
      "6      Test/00006.png\n",
      "8      Test/00008.png\n",
      "12     Test/00012.png\n",
      "16     Test/00016.png\n",
      "17     Test/00017.png\n",
      "...               ...\n",
      "12608  Test/12608.png\n",
      "12616  Test/12616.png\n",
      "12617  Test/12617.png\n",
      "12619  Test/12619.png\n",
      "12624  Test/12624.png\n",
      "\n",
      "[2370 rows x 1 columns]\n",
      "2370\n"
     ]
    }
   ],
   "source": [
    "# print(df_non_critical)\n",
    "null_count = 0\n",
    "df_cleaned_critical = df_critical.dropna()\n",
    "print(df_cleaned_critical)\n",
    "for i in df_cleaned_critical['Critical']:\n",
    "    if i :\n",
    "        continue\n",
    "    else:\n",
    "        null_count+=1\n",
    "print(len(df_cleaned_critical))\n",
    "        \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f7d264a",
   "metadata": {
    "papermill": {
     "duration": 0.015248,
     "end_time": "2024-09-06T06:43:36.990361",
     "exception": false,
     "start_time": "2024-09-06T06:43:36.975113",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Merge the new df with old df for getting corresponding row values "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "1a3e1716",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:43:37.023365Z",
     "iopub.status.busy": "2024-09-06T06:43:37.022930Z",
     "iopub.status.idle": "2024-09-06T06:43:37.044826Z",
     "shell.execute_reply": "2024-09-06T06:43:37.043512Z"
    },
    "papermill": {
     "duration": 0.040807,
     "end_time": "2024-09-06T06:43:37.047135",
     "exception": false,
     "start_time": "2024-09-06T06:43:37.006328",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         Non_Critical            Path  ClassId\n",
      "0      Test/00000.png  Test/00000.png       16\n",
      "1      Test/00001.png  Test/00001.png        1\n",
      "2      Test/00002.png  Test/00002.png       38\n",
      "3      Test/00003.png  Test/00003.png       33\n",
      "4      Test/00004.png  Test/00004.png       11\n",
      "...               ...             ...      ...\n",
      "10255  Test/12625.png  Test/12625.png       12\n",
      "10256  Test/12626.png  Test/12626.png       33\n",
      "10257  Test/12627.png  Test/12627.png        6\n",
      "10258  Test/12628.png  Test/12628.png        7\n",
      "10259  Test/12629.png  Test/12629.png       10\n",
      "\n",
      "[10260 rows x 3 columns]\n"
     ]
    }
   ],
   "source": [
    "df_non_critical_final = pd.merge(df_cleaned_non_critical, df[['Path', 'ClassId']], left_on='Non_Critical', right_on='Path', how='left')\n",
    "# result_df2 = pd.merge(new_df, df[['Path', 'ClassId']], left_on='Non_Critical', right_on='Path', how='left')\n",
    "\n",
    "print(df_non_critical_final )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "0b1bea2a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:43:37.078871Z",
     "iopub.status.busy": "2024-09-06T06:43:37.077714Z",
     "iopub.status.idle": "2024-09-06T06:43:37.091058Z",
     "shell.execute_reply": "2024-09-06T06:43:37.089871Z"
    },
    "papermill": {
     "duration": 0.031648,
     "end_time": "2024-09-06T06:43:37.093467",
     "exception": false,
     "start_time": "2024-09-06T06:43:37.061819",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def is_critical(element):\n",
    "    return 1 if int(element) in critical_classes else 0\n",
    "df_non_critical_final['Layer1_output'] = df_non_critical_final['ClassId'].apply(is_critical)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "213a425e",
   "metadata": {
    "papermill": {
     "duration": 0.014539,
     "end_time": "2024-09-06T06:43:37.122483",
     "exception": false,
     "start_time": "2024-09-06T06:43:37.107944",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Print random samples from df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "c83b0f31",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:43:37.153956Z",
     "iopub.status.busy": "2024-09-06T06:43:37.153527Z",
     "iopub.status.idle": "2024-09-06T06:43:37.167714Z",
     "shell.execute_reply": "2024-09-06T06:43:37.166527Z"
    },
    "papermill": {
     "duration": 0.032496,
     "end_time": "2024-09-06T06:43:37.170004",
     "exception": false,
     "start_time": "2024-09-06T06:43:37.137508",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Non_Critical</th>\n",
       "      <th>Path</th>\n",
       "      <th>ClassId</th>\n",
       "      <th>Layer1_output</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10255</th>\n",
       "      <td>Test/12625.png</td>\n",
       "      <td>Test/12625.png</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10256</th>\n",
       "      <td>Test/12626.png</td>\n",
       "      <td>Test/12626.png</td>\n",
       "      <td>33</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10257</th>\n",
       "      <td>Test/12627.png</td>\n",
       "      <td>Test/12627.png</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10258</th>\n",
       "      <td>Test/12628.png</td>\n",
       "      <td>Test/12628.png</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10259</th>\n",
       "      <td>Test/12629.png</td>\n",
       "      <td>Test/12629.png</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Non_Critical            Path  ClassId  Layer1_output\n",
       "10255  Test/12625.png  Test/12625.png       12              0\n",
       "10256  Test/12626.png  Test/12626.png       33              0\n",
       "10257  Test/12627.png  Test/12627.png        6              0\n",
       "10258  Test/12628.png  Test/12628.png        7              0\n",
       "10259  Test/12629.png  Test/12629.png       10              0"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_non_critical_final.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "e87d6253",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:43:37.201253Z",
     "iopub.status.busy": "2024-09-06T06:43:37.200850Z",
     "iopub.status.idle": "2024-09-06T06:43:37.245487Z",
     "shell.execute_reply": "2024-09-06T06:43:37.244375Z"
    },
    "papermill": {
     "duration": 0.063278,
     "end_time": "2024-09-06T06:43:37.248068",
     "exception": false,
     "start_time": "2024-09-06T06:43:37.184790",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.to_csv('filename.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "8ebca18e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:43:37.280859Z",
     "iopub.status.busy": "2024-09-06T06:43:37.280454Z",
     "iopub.status.idle": "2024-09-06T06:43:37.295806Z",
     "shell.execute_reply": "2024-09-06T06:43:37.294450Z"
    },
    "papermill": {
     "duration": 0.035569,
     "end_time": "2024-09-06T06:43:37.298457",
     "exception": false,
     "start_time": "2024-09-06T06:43:37.262888",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            Critical            Path  ClassId\n",
      "0     Test/00006.png  Test/00006.png       18\n",
      "1     Test/00008.png  Test/00008.png       25\n",
      "2     Test/00012.png  Test/00012.png       23\n",
      "3     Test/00016.png  Test/00016.png       21\n",
      "4     Test/00017.png  Test/00017.png       20\n",
      "...              ...             ...      ...\n",
      "2365  Test/12608.png  Test/12608.png       18\n",
      "2366  Test/12616.png  Test/12616.png       18\n",
      "2367  Test/12617.png  Test/12617.png       31\n",
      "2368  Test/12619.png  Test/12619.png       31\n",
      "2369  Test/12624.png  Test/12624.png       25\n",
      "\n",
      "[2370 rows x 3 columns]\n"
     ]
    }
   ],
   "source": [
    "df_critical_final = pd.merge(df_cleaned_critical, df[['Path', 'ClassId']], left_on='Critical', right_on='Path', how='left')\n",
    "# result_df2 = pd.merge(new_df, df[['Path', 'ClassId']], left_on='Non_Critical', right_on='Path', how='left')\n",
    "\n",
    "print(df_critical_final )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2358353b",
   "metadata": {
    "papermill": {
     "duration": 0.014999,
     "end_time": "2024-09-06T06:43:37.329180",
     "exception": false,
     "start_time": "2024-09-06T06:43:37.314181",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Getting a random sample"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "912b1d2a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:43:37.363778Z",
     "iopub.status.busy": "2024-09-06T06:43:37.363118Z",
     "iopub.status.idle": "2024-09-06T06:43:37.373893Z",
     "shell.execute_reply": "2024-09-06T06:43:37.372754Z"
    },
    "papermill": {
     "duration": 0.031393,
     "end_time": "2024-09-06T06:43:37.376275",
     "exception": false,
     "start_time": "2024-09-06T06:43:37.344882",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            Critical            Path  ClassId\n",
      "1012  Test/05478.png  Test/05478.png       21\n",
      "1478  Test/07985.png  Test/07985.png       24\n",
      "1726  Test/09267.png  Test/09267.png       21\n",
      "930   Test/05050.png  Test/05050.png       25\n",
      "78    Test/00339.png  Test/00339.png       22\n",
      "838   Test/04571.png  Test/04571.png       31\n",
      "2356  Test/12564.png  Test/12564.png       23\n",
      "1626  Test/08751.png  Test/08751.png       31\n",
      "154   Test/00829.png  Test/00829.png       27\n",
      "945   Test/05151.png  Test/05151.png       25\n"
     ]
    }
   ],
   "source": [
    "random_sample = df_critical_final.sample(n=10, random_state=72)\n",
    "print(random_sample)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "c42c27a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:43:37.408514Z",
     "iopub.status.busy": "2024-09-06T06:43:37.407469Z",
     "iopub.status.idle": "2024-09-06T06:43:37.412820Z",
     "shell.execute_reply": "2024-09-06T06:43:37.411494Z"
    },
    "papermill": {
     "duration": 0.023869,
     "end_time": "2024-09-06T06:43:37.415121",
     "exception": false,
     "start_time": "2024-09-06T06:43:37.391252",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# for index, i in enumerate(new_df['Critical']):\n",
    "#     if i == None:  # Check for an empty string\n",
    "#         print(new_df['Non_Critical'].iloc[index])\n",
    "#         break# Print the corresponding Non_Critical value\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44db1da7",
   "metadata": {
    "papermill": {
     "duration": 0.014479,
     "end_time": "2024-09-06T06:43:37.444647",
     "exception": false,
     "start_time": "2024-09-06T06:43:37.430168",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# IMAGE VIEWING AND ANALYSIS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "ef774549",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:43:37.476052Z",
     "iopub.status.busy": "2024-09-06T06:43:37.475650Z",
     "iopub.status.idle": "2024-09-06T06:43:37.480603Z",
     "shell.execute_reply": "2024-09-06T06:43:37.479479Z"
    },
    "papermill": {
     "duration": 0.023734,
     "end_time": "2024-09-06T06:43:37.483079",
     "exception": false,
     "start_time": "2024-09-06T06:43:37.459345",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# print(type(combined_df[\"Non_Critical\"]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "47fd4be2",
   "metadata": {
    "papermill": {
     "duration": 0.014807,
     "end_time": "2024-09-06T06:43:37.512877",
     "exception": false,
     "start_time": "2024-09-06T06:43:37.498070",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Viewing Images using CSV Files**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "f994c4a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:43:37.544498Z",
     "iopub.status.busy": "2024-09-06T06:43:37.544010Z",
     "iopub.status.idle": "2024-09-06T06:43:37.902331Z",
     "shell.execute_reply": "2024-09-06T06:43:37.900948Z"
    },
    "papermill": {
     "duration": 0.378035,
     "end_time": "2024-09-06T06:43:37.905926",
     "exception": false,
     "start_time": "2024-09-06T06:43:37.527891",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Selected file: /kaggle/input/gtsrb-german-traffic-sign/Test/08768.png\n",
      "ClassId: No vehicles\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import os\n",
    "import random\n",
    "import cv2\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.image as mpimg\n",
    "import pandas as pd\n",
    "\n",
    "# Define paths\n",
    "NON_CRITICAL_TRAIN_PATH = '/kaggle/input/gtsrb-german-traffic-sign/'\n",
    "\n",
    "# Get a random file path and corresponding ClassId from the 'Critical' column\n",
    "random_row = df_non_critical_final .sample(n=1)  # Select a single random row\n",
    "image_path = random_row['Non_Critical'].values[0]  # Extract the path from the selected row\n",
    "class_id = random_row['ClassId'].values[0]  # Extract the ClassId from the selected row\n",
    "\n",
    "# Construct the full file path\n",
    "file_path = os.path.join(NON_CRITICAL_TRAIN_PATH, image_path)\n",
    "\n",
    "# Print the selected file name and ClassId for reference\n",
    "print(f\"Selected file: {file_path}\")\n",
    "print(f\"ClassId: {class_names[int(class_id)]}\")\n",
    "\n",
    "# Read and display the image\n",
    "img = mpimg.imread(file_path)\n",
    "plt.imshow(img)\n",
    "plt.axis('off')  # Hide axes\n",
    "plt.show()\n",
    "\n",
    "# Load and preprocess the selected image\n",
    "image = cv2.imread(file_path, cv2.IMREAD_COLOR)\n",
    "\n",
    "if image is not None:\n",
    "    # Resize the image to (30, 30)\n",
    "    image_resized = cv2.resize(image, (30, 30), interpolation=cv2.INTER_NEAREST)\n",
    "    \n",
    "    # Convert the image to a numpy array and add batch dimension\n",
    "    data = np.expand_dims(np.array(image_resized), axis=0)\n",
    "else:\n",
    "    print(f\"Error loading image: {file_path}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bfe01259",
   "metadata": {
    "papermill": {
     "duration": 0.025374,
     "end_time": "2024-09-06T06:43:37.957349",
     "exception": false,
     "start_time": "2024-09-06T06:43:37.931975",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "b73cc9cd",
   "metadata": {
    "papermill": {
     "duration": 0.01519,
     "end_time": "2024-09-06T06:43:37.989015",
     "exception": false,
     "start_time": "2024-09-06T06:43:37.973825",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Viewing image from dir**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "9a5bb389",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T06:43:38.022437Z",
     "iopub.status.busy": "2024-09-06T06:43:38.021963Z",
     "iopub.status.idle": "2024-09-06T06:43:38.114131Z",
     "shell.execute_reply": "2024-09-06T06:43:38.112717Z"
    },
    "papermill": {
     "duration": 0.1121,
     "end_time": "2024-09-06T06:43:38.116835",
     "exception": false,
     "start_time": "2024-09-06T06:43:38.004735",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Selected file: /kaggle/input/gtsrb-german-traffic-sign/Test/05794.png\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import os\n",
    "import random\n",
    "import cv2\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.image as mpimg\n",
    "\n",
    "# Define paths\n",
    "NON_CRITICAL_TRAIN_PATH = '/kaggle/input/gtsrb-german-traffic-sign/Test'\n",
    "\n",
    "# Get random values from the 8th and 9th columns\n",
    "# image_path, actual_value = get_random_row_values(df, image_column, name_column)\n",
    "# Select a single random image from the non-critical directory\n",
    "file_list = os.listdir(NON_CRITICAL_TRAIN_PATH)\n",
    "random_file = random.choice(file_list)\n",
    "file_path = os.path.join(NON_CRITICAL_TRAIN_PATH, random_file)\n",
    "\n",
    "# Print the selected file name for reference\n",
    "print(f\"Selected file: {file_path}\")\n",
    "# print(f\"ClassId: {class_names[int(class_id)]}\")\n",
    "# Read and display the image\n",
    "img = mpimg.imread(file_path)\n",
    "plt.imshow(img)\n",
    "plt.axis('off')  # Hide axes\n",
    "plt.show()\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 82373,
     "sourceId": 191501,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30761,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 99.264994,
   "end_time": "2024-09-06T06:43:38.653673",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-06T06:41:59.388679",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
